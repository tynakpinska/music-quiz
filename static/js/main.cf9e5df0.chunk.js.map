{"version":3,"sources":["Components/Answer.js","Components/AnswersList.js","Components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["Answer","props","style","checking","index","checkedAnswer","background","border","correctIndex","className","onClick","e","handleCheck","dangerouslySetInnerHTML","__html","answer","AnswersList","question","incorrect","correct","first","slice","second","answersArray","map","a","key","initialState","questions","currentQuestion","points","blocked","Quiz","fetchQuestions","fetch","then","resp","json","setState","results","q","Math","floor","random","catch","err","console","log","state","handleNext","prevState","handlePrevious","handleCheckAnswers","handlePlayAgain","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.cf9e5df0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Answer = props => {\r\n  const handleClick = e => {\r\n    props.handleCheck(props.index);\r\n  };\r\n\r\n  let style = {};\r\n\r\n  if (props.checking) {\r\n    if (props.index === props.checkedAnswer) {\r\n      style = { background: \"#D50000\", border: \"3px solid #FFC551\" };\r\n    }\r\n    if (props.index === props.correctIndex) {\r\n      style = { background: \"#63DB1C\" };\r\n    }\r\n  } else {\r\n    if (props.index === props.checkedAnswer) {\r\n      style = { background: \"#004F4F\", border: \"3px solid #FFC551\" };\r\n    }\r\n  }\r\n\r\n  return (\r\n    <button\r\n      className=\"answer\"\r\n      onClick={handleClick}\r\n      dangerouslySetInnerHTML={{ __html: props.answer }}\r\n      style={style}\r\n    ></button>\r\n  );\r\n};\r\n\r\nexport default Answer;\r\n","import React from \"react\";\r\nimport Answer from \"./Answer\";\r\n\r\nconst AnswersList = ({ question, handleCheck, checking }) => {\r\n  const incorrect = question.incorrect;\r\n  const correct = question.correct;\r\n  const first = incorrect.slice(0, question.correctIndex);\r\n  const second = incorrect.slice(question.correctIndex, 3);\r\n  const answersArray = [...first, correct, ...second];\r\n\r\n  return (\r\n    <div className=\"questions\">\r\n      {answersArray.map((a, index) => (\r\n        <Answer\r\n          question={question}\r\n          answer={a}\r\n          key={index}\r\n          index={index}\r\n          correctIndex={question.correctIndex}\r\n          checkedAnswer={question.checkedAnswer}\r\n          handleCheck={handleCheck}\r\n          checking={checking}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnswersList;\r\n","import React, { Component } from \"react\";\r\nimport AnswersList from \"./AnswersList\";\r\n\r\nconst initialState = {\r\n  questions: [],\r\n  currentQuestion: 0,\r\n  points: 0,\r\n  checking: false,\r\n  blocked: false,\r\n};\r\n\r\nclass Quiz extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n\r\n  fetchQuestions = () => {\r\n    fetch(\r\n      \"https://opentdb.com/api.php?amount=10&category=12&difficulty=easy&type=multiple\"\r\n    )\r\n      .then(resp => resp.json())\r\n      .then(resp => {\r\n        this.setState({\r\n          questions: [\r\n            ...resp.results.map(q => {\r\n              return {\r\n                question: q[\"question\"],\r\n                incorrect: q[\"incorrect_answers\"],\r\n                correct: q[\"correct_answer\"],\r\n                correctIndex: Math.floor(Math.random() * 4),\r\n                checkedAnswer: \"\",\r\n              };\r\n            }),\r\n          ],\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.log(err, \"Unable to fetch questions\");\r\n      });\r\n  };\r\n\r\n  handleCheck = index => {\r\n    if (!this.state.checking) {\r\n      const questions = { ...this.state.questions };\r\n      if (questions[this.state.currentQuestion].checkedAnswer === index) {\r\n        questions[this.state.currentQuestion].checkedAnswer = \"\";\r\n        this.setState({ questions, blocked: true });\r\n      } else {\r\n        questions[this.state.currentQuestion].checkedAnswer = index;\r\n        this.setState({ questions, blocked: false });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleNext = (e, { questions, currentQuestion } = this.state) => {\r\n    if (questions[currentQuestion].checkedAnswer === \"\") {\r\n      this.setState({ blocked: true });\r\n    } else {\r\n      this.setState({ currentQuestion: currentQuestion + 1, blocked: false });\r\n    }\r\n    if (\r\n      questions[this.state.currentQuestion].correctIndex ===\r\n      questions[this.state.currentQuestion].checkedAnswer &&\r\n      !this.state.checking\r\n    ) {\r\n      this.setState(prevState => {\r\n        return {\r\n          points: prevState.points + 1,\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  handlePrevious = (e, { currentQuestion } = this.state) => {\r\n    this.setState({ currentQuestion: currentQuestion - 1 });\r\n  };\r\n\r\n  handleCheckAnswers = () => {\r\n    this.setState({ currentQuestion: 0, checking: true });\r\n  };\r\n\r\n  handlePlayAgain = () => {\r\n    this.setState(initialState);\r\n    this.fetchQuestions();\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchQuestions();\r\n  }\r\n\r\n  render({ questions, currentQuestion, points, checking } = this.state) {\r\n    return currentQuestion !== 10 ? (\r\n      questions[currentQuestion] ? (\r\n        <div className=\"quiz\">\r\n          <h2\r\n            dangerouslySetInnerHTML={{\r\n              __html: questions[currentQuestion].question,\r\n            }}\r\n          ></h2>\r\n          <AnswersList\r\n            question={questions[currentQuestion]}\r\n            handleCheck={index => this.handleCheck(index)}\r\n            checking={checking}\r\n          />\r\n          <div className=\"navButtons\">\r\n            {this.state.currentQuestion ? (\r\n              <button className=\"prevBtn\" onClick={this.handlePrevious}>\r\n                Previous\r\n              </button>\r\n            ) : (\r\n              <div></div>\r\n            )}\r\n            <p>{currentQuestion + 1}/10</p>\r\n            <button className=\"nextBtn\" onClick={this.handleNext}>\r\n              Next\r\n            </button>\r\n          </div>\r\n          {this.state.blocked ? <p>Select your answer</p> : <div></div>}\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )\r\n    ) : (\r\n      <div className=\"quiz\">\r\n        <p>Score: {points}/10</p>\r\n        <button onClick={this.handleCheckAnswers}>Check answers</button>\r\n        <button onClick={this.handlePlayAgain}>Play again</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quiz;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Quiz from \"./Components/Quiz\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Music Quiz</h1>\n      <Quiz />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}